# -*- coding: utf-8 -*-
#
# tslearn documentation build configuration file, created by
# sphinx-quickstart on Mon May  8 21:34:49 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import os
import subprocess
import sys
import warnings

import sphinx_bootstrap_theme

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
on_rtd = os.environ.get('READTHEDOCS') == 'True'
if not on_rtd:
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
rtd_version = os.environ.get('READTHEDOCS_VERSION', 'local')

import tslearn


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.doctest',
    'sphinx.ext.mathjax',
    'sphinx.ext.intersphinx',
    'sphinx.ext.linkcode',
    'sphinx_gallery.gen_gallery',
    'numpydoc',
    'nbsphinx'
]

numpydoc_show_class_members = True
numpydoc_class_members_toctree = False

autosummary_generate = True
autosummary_generate_overwrite = False

intersphinx_mapping = {
    'python': ('https://docs.python.org/{.major}'.format(
        sys.version_info), None),
    'numpy': ('https://numpy.org/doc/stable', None),
    'scipy': ('https://docs.scipy.org/doc/scipy', None),
    'matplotlib': ('https://matplotlib.org/stable', None),
    'sklearn': ('https://scikit-learn.org/stable', None)
}

from sphinx_gallery.scrapers import matplotlib_scraper

def matplotlib_svg_scraper(*args, **kwargs):
    """ SVG scrapper """
    kwargs.pop("format", None)
    return matplotlib_scraper(*args, format='svg', **kwargs)

sphinx_gallery_conf = {
    'examples_dirs': ['./examples'],
    'gallery_dirs': ['./auto_examples'],
    'reference_url': {'tslearn': None},
    'default_thumb_file': os.path.join(os.path.dirname(__file__),
                                       '_static/img/logo.png'),
    'backreferences_dir': 'gen_modules/backreferences',
    'doc_module': ('tslearn',),
    'subsection_order': ["examples/metrics", "examples/neighbors",
                         "examples/clustering", "examples/classification",
                         "examples/autodiff", "examples/misc"].index,
    'image_scrapers': (matplotlib_svg_scraper,),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix of source filenames.
source_suffix = {'.rst': 'restructuredtext'}

# The encoding of source files.
#source_encoding = 'utf-8'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'tslearn'
copyright = u'2025, Romain Tavenard'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
version = tslearn.__version__
# The full version, including alpha/beta/rc tags.
release = tslearn.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#language = None

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
#today = ''
# Else, today_fmt is used as the format for a strftime call.
#today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = [
    "_build",
    "**sg_execution_times**",
    "examples/**/*.py",
    "auto_examples/**/*.ipynb",
    "auto_examples/**/*.py"
]

# The reST default role (used for this markup: `text`) to use for all
# documents.
#default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
#add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
#add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
#show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# A list of ignored prefixes for module index sorting.
#modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
#keep_warnings = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# html_theme = 'sphinx_rtd_theme'
html_theme = 'bootstrap'
html_theme_path = sphinx_bootstrap_theme.get_html_theme_path()
html_theme_options = {
    # Tab name for entire site. (Default: "Site")
    'navbar_site_name': "Site map",

    'navbar_links': [
        ("Quick Start", "quickstart"),
        ("User Guide", "user_guide/userguide"),
        ("API", "reference"),
        ("Examples", "auto_examples/index"),
        ("Citing tslearn", "citing"),
        ("Code on GitHub", "https://github.com/tslearn-team/tslearn/", True),
    ],

    # Render the next and previous page links in navbar. (Default: true)
    'navbar_sidebarrel': False,

    # Render the current pages TOC in the navbar. (Default: true)
    'navbar_pagenav': False,

    # Tab name for the current pages TOC. (Default: "Page")
    'navbar_pagenav_name': "Current Page",

    # Remove search sidebar
    'nosidebar': True,

    # Global TOC depth for "site" navbar tab. (Default: 1)
    # Switching to -1 shows all levels.
    'globaltoc_depth': -1,
    'globaltoc_includehidden': "false",

    # Location of link to source.
    # Options are "nav" (default), "footer" or anything else to exclude.
    'source_link_position': "exclude",

    # Bootswatch (http://bootswatch.com/) theme.
    #
    # Options are nothing (default) or the name of a valid theme
    # such as "cosmo" or "sandstone".
    #
    # The set of valid themes depend on the version of Bootstrap
    # that's used (the next config option).
    #
    # Currently, the supported themes are:
    # - Bootstrap 2: https://bootswatch.com/2
    # - Bootstrap 3: https://bootswatch.com/3
    'bootswatch_theme': "lumen"
}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
#html_theme_path = []

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
#html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
#html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "_static/tslearn_logo.svg"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
#html_favicon = None

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
#html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
#html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
#html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
#html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
#html_additional_pages = {}

# If false, no module index is generated.
#html_domain_indices = True

# If false, no index is generated.
#html_use_index = True

# If true, the index is split into individual pages for each letter.
#html_split_index = False

# If true, links to the reST sources are added to the pages.
#html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
#html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
#html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
#html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
#html_file_suffix = None

# Output file base name for HTML help builder.
htmlhelp_basename = 'tslearndoc'


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
# The paper size ('letterpaper' or 'a4paper').
#'papersize': 'letterpaper',

# The font size ('10pt', '11pt' or '12pt').
#'pointsize': '10pt',

# Additional stuff for the LaTeX preamble.
#'preamble': '',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  ('index', 'tslearn.tex', u'tslearn Documentation',
   u'Romain Tavenard', 'manual'),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
#latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
#latex_use_parts = False

# If true, show page references after internal links.
#latex_show_pagerefs = False

# If true, show URL addresses after external links.
#latex_show_urls = False

# Documents to append as an appendix to all manuals.
#latex_appendices = []

# If false, no module index is generated.
#latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('index', 'tslearn', u'tslearn Documentation',
     [u'Romain Tavenard'], 1)
]

# If true, show URL addresses after external links.
#man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  ('index', 'tslearn', u'tslearn Documentation',
   u'Romain Tavenard', 'tslearn', 'One line description of project.',
   'Miscellaneous'),
]

# Documents to append as an appendix to all manuals.
#texinfo_appendices = []

# If false, no module index is generated.
#texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
#texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
#texinfo_no_detailmenu = False

# The following is used by sphinx.ext.linkcode to provide links to github
REVISION_CMD = 'git rev-parse --short HEAD'


def _get_git_revision():
    try:
        revision = subprocess.check_output(REVISION_CMD.split()).strip()
    except (subprocess.CalledProcessError, OSError):
        print('Failed to execute git to get revision')
        return None
    return revision.decode('utf-8')

def linkcode_resolve(domain, info):
    def find_source():
        # try to find the file and line number, based on code from numpy:
        # https://github.com/numpy/numpy/blob/master/doc/source/conf.py#L286
        obj = sys.modules[info['module']]
        for part in info['fullname'].split('.'):
            obj = getattr(obj, part)
        import inspect
        import os
        if hasattr(obj, "__wrapped__"):
            obj = obj.__wrapped__
        if not obj.__module__.startswith('tslearn'):
            raise RuntimeError('Not a tslearn module')
        fn = inspect.getsourcefile(obj)
        fn = os.path.relpath(fn, start=os.path.dirname(tslearn.__file__))
        source, lineno = inspect.getsourcelines(obj)
        return fn, lineno, lineno + len(source) - 1

    if domain != 'py' or not info['module']:
        return None
    try:
        filename = 'tslearn/%s#L%d-L%d' % find_source()
    except RuntimeError:
        return None
    except Exception:
        filename = info['module'].replace('.', '/') + '.py'
    revision = _get_git_revision()
    return "https://github.com/tslearn-team/tslearn/blob/%s/%s" % (revision,
                                                                   filename)


warnings.filterwarnings("ignore", category=UserWarning,
                        message='Matplotlib is currently using agg, which is a'
                                ' non-GUI backend, so cannot show the figure.')


def get_dependencies():
    """ Retrieve required dependencies """
    import distutils.core
    from packaging.requirements import Requirement
    setup_ = distutils.core.run_setup("../setup.py", stop_after='run')
    return [Requirement(requirement) for requirement in setup_.install_requires]

rst_templates= {
    "dependencies.rst": {"dependencies": get_dependencies()}
}

def setup(app):
    """ Setup our app """
    # Ensure pandoc is installed
    import pypandoc
    pypandoc.ensure_pandoc_installed(
        targetfolder=os.path.join(sys.exec_prefix, "bin"),
        delete_installer=True,
    )

    # Deals with dynamic rst templates
    import jinja2
    config_value = 'rst_templates'
    def render_on_include_read(app_, relative_path, _, content):
        """
        Render our page as a jinja template with dedicated context
        on include-read event.
        """
        templates = getattr(app_.config, config_value, {})
        if str(relative_path) in templates:
            content[0] = jinja2.Template(content[0]).render(
                **templates[str(relative_path)]
            )
    def render_on_source_read(app_, doc_name, source):
        """
        Render our page as a jinja template with dedicated context
        on source-read event.
        """
        templates = getattr(app_.config, config_value, {})
        if doc_name + '.rst' in templates:
            rendered = jinja2.Template(source[0]).render(
                **templates[doc_name + '.rst']
            )
            source[0] = rendered
    app.add_config_value(config_value, {}, True, dict)
    app.connect("source-read", render_on_source_read)
    app.connect("include-read", render_on_include_read)

